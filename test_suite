GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;36m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

function pause()
{
    read -s -n 1 #Pause
}

function fullread()
{
    local IFS='';
    read -r $1;
}

function start()
{
#cat assets/logo
#pause
check_id
}


####### LOGIN #######
function check_id()
{
	clear
	echo "============================================="
	echo -e "       Shell Test Suite -  ${BLUE}HOME${NC}        "
	echo "============================================="
	echo -e "Enter your Holberton ID or ${RED}x to exit${NC}"
	read ID_HOLBERTON
	RESULTADO=$(grep $ID_HOLBERTON assets/hbtn_mvd_users)

	if [ "$ID_HOLBERTON" = "x" ]
	then
		exit
	fi

	if [ -z "$RESULTADO" ]
	then
		echo "ID not found in test suite database"
		echo "Press any key and try again"
		pause
		check_id
	else
		echo "---------------------------------------------"
		echo -e "Logged in as: ${GREEN}$RESULTADO${NC}"
		echo "Confirm: [y/n]"
		echo "---------------------------------------------"
		read CONFIRM_CHECK

	case $CONFIRM_CHECK in
	y)
		menu
		;;
	n)
		check_id
		;;
	x)
		exit
		;;
	*)
		echo -e "${RED}Option not recognized${NC}"
		echo "Press any key and try again"
		pause
		check_id
		;;
	esac
	fi
}

####### MENU #######
function menu()
{
	clear
	menu_update
	clear
	echo -e " Logged in as: ${GREEN}$RESULTADO${NC}"
	echo "============================================="
	echo -e "       Shell Test Suite -  ${BLUE}MENU${NC}        "
	echo "============================================="
	echo "  1 - Run test suite"
	echo "  2 - List current test cases"
	echo "  3 - Add new test cases"
	echo "  4 - Exit"
	read OP;
	case $OP in
	1)
		#1 - Run test suite
		run_test
		;;
	2)
		#2 - List test results
		list_test
		;;
	3)
		#3 - Add a new test
		add_test
		;;
	4)
		if [ -s /tmp/shell_test_suit/logout ]
		then
			echo "---------------------------------------------"
		fi
		exit
		;;
	*)
		echo -e "${RED}Option not recognized${NC}"
		echo "Press any key and try again"
		pause
		menu
	;;
    	esac
}
function menu_update()
{
	echo -e " Logged in as: ${GREEN}$RESULTADO${NC}"
	echo "============================================="
	echo -e "       Shell Test Suite -  ${BLUE}MENU${NC}        "
	echo "============================================="
	echo -e " Updating test suite..."
	RAM=$(git pull origin main)
	clear
	echo -e " Logged in as: ${GREEN}$RESULTADO${NC}"
	echo "============================================="
	echo -e "       Shell Test Suite -  ${BLUE}MENU${NC}        "
	echo "============================================="
	echo -e " ${GREEN}Files updated${NC}"
	echo " Press any key to open de menu"
	pause
}


####### RUN #######
run_test()
{
	rm -rf simple_shell_task$N_VERSION/diff
	run_test_menu
	echo "---------------------------------------------"
	echo -e "${BLUE}Running test cases for task $N_VERSION:${NC}"
	#obtener numero de casos y cargarlos en $N
	N=$(wc -l ./simple_shell_task$N_VERSION/list_test | cut -f1 -d" ")
	if [[ ! -d "simple_shell_task$N_VERSION/expected" ]]
	then
		$(mkdir simple_shell_task$N_VERSION/expected)
	fi
	if [[ ! -d "simple_shell_task$N_VERSION/obtained" ]]
	then
		$(mkdir simple_shell_task$N_VERSION/obtained)
	fi
	if [[ ! -d "simple_shell_task$N_VERSION/diff" ]]
	then
		$(mkdir simple_shell_task$N_VERSION/diff)
	fi
	i=1
	ok_n=0
	error_n=0
	while [ $i -le $N ]
	do
		#TODO- not working yet
		command=$(awk "NR == $i" ./simple_shell_task$N_VERSION/list_test)
		RAM=$($command > simple_shell_task$N_VERSION/expected/test$i 2>&1)
		RAM=$(echo "$command" | ./hsh > simple_shell_task$N_VERSION/obtained/test$i 2>&1)
		RESULT=$(diff simple_shell_task$N_VERSION/obtained/test$i simple_shell_task$N_VERSION/expected/test$i)
		if [ "$RESULT" = "" ]
		then
			echo -e "$i - [${GREEN}OK${NC}]      \"$command\""
			((ok_n++))
		else
			echo -e "$i - [${RED}Fail${NC}]    \"$command\""
			RAM=$(sdiff simple_shell_task$N_VERSION/obtained/test$i simple_shell_task$N_VERSION/expected/test$i > simple_shell_task$N_VERSION/diff/test$i 2>&1)
			((error_n++))
		fi
	((i++))
	done
	echo "---------------------------------------------"
	echo "$ok_n / $N - Correctos"
	echo "$error_n Errors detected"
	echo "---------------------------------------------"

	rm -rf simple_shell_task$N_VERSION/obtained
	rm -rf simple_shell_task$N_VERSION/expected

	echo -e "Press ${RED}x to exit${NC}"
	echo "To return to the menu press any other key"
	read IDK
	if [ "$IDK" = "x" ]
	then
		exit
	else
		menu
	fi
}
function run_test_menu()
{
	clear
	echo -e " Logged in as: ${GREEN}$RESULTADO${NC}"
	echo "============================================="
	echo -e "        Test Suite -  ${BLUE}RUN TEST${NC}       "
	echo "============================================="
    	echo " Select the version of simple shell to which"
	echo " you want to run the list of current cases"
	echo " Exmaple: to run all task 2 tests - press 2"
	echo "---------------------------------------------"
	echo " Mandatory tasks:"
	echo " Task 2 - Simple shell 0.1"
	echo " Task 3 - Simple shell 0.2"
	echo " Task 4 - Simple shell 0.3"
	echo " Task 5 - Simple shell 0.4"
	echo "---------------------------------------------"

	read N_VERSION
	if [[ ! ("$N_VERSION" -eq 2 || "$N_VERSION" -eq 3 || "$N_VERSION" -eq 4 || "$N_VERSION" -eq 5) ]]
	then
		echo -e "${RED}Option not recognized${NC}"
		echo "Press any key and try again"
		pause
		run_test_menu
	fi	
}

####### LIST #######
#2 - List test results
function list_test()
{
	list_test_menu
	echo "---------------------------------------------"
	echo -e "${BLUE}Current list of cases for task $N_VERSION:${NC}"

	#List all functions
	echo "$(cat -n simple_shell_task$N_VERSION/list_test)"
	echo "---------------------------------------------"
	echo -e "To delete a test enter ${RED}\"d #\"${NC}\n(repacing the ${RED}#${NC} char for the test number)\n"
	echo "To return to the menu press any other key"
	read IF_DELETE
	OP_DEL=$(echo "$IF_DELETE" | cut -d' ' -f1)

	if [ "$OP_DEL" = "d" ]
	then
		OP_DEL=$(echo "$IF_DELETE" | cut -d' ' -f2)
		delete_test $OP_DEL
	fi
    	menu
}
function list_test_menu()
{
	clear
	echo -e " Logged in as: ${GREEN}$RESULTADO${NC}"
	echo "============================================="
	echo -e "        Test Suite -  ${BLUE}LIST TEST${NC}       "
	echo "============================================="
    	echo " Select the version of simple shell to which"
	echo " you want to display the list of current cases"
	echo " Exmaple: to diplay task 2 list - press 2"
	echo "---------------------------------------------"
	echo " Mandatory tasks:"
	echo " Task 2 - Simple shell 0.1"
	echo " Task 3 - Simple shell 0.2"
	echo " Task 4 - Simple shell 0.3"
	echo " Task 5 - Simple shell 0.4"
	echo "---------------------------------------------"

	read N_VERSION
	if [[ ! ("$N_VERSION" -eq 2 || "$N_VERSION" -eq 3 || "$N_VERSION" -eq 4 || "$N_VERSION" -eq 5) ]]
	then
		echo -e "${RED}Option not recognized${NC}"
		echo "Press any key and try again"
		pause
		list_test_menu
	fi	
}
function delete_test()
{
	RAM=$(sed -i "$1d" simple_shell_task$N_VERSION/list_test)
	echo -e "${BLUE}Updating to github...${NC}"
	RAM=$(git add ./simple_shell_task$N_VERSION/list_test)
	RAM=$(git status)
	RAM=$(git commit -m "new cases from $ID_HOLBERTON (auto-push)")
	RAM=$(git push origin main)
	echo -e "${BLUE}To return to the menu press any key${NC}"
	pause
	menu
}


####### ADD #######
#3 - Add new test
function add_test()
{
	add_test_menu
	new_case

	#Upload
}
function add_test_menu()
{
	clear
	echo -e " Logged in as: ${GREEN}$RESULTADO${NC}"
	echo "============================================="
	echo -e "        Test Suite -  ${BLUE}ADD TEST${NC}       "
	echo "============================================="
    	echo " Select the version of simple shell to which"
	echo " you want to add a new test case"
	echo " Exmaple: to add to task 2 list - press 2"
	echo "---------------------------------------------"
	echo " Mandatory tasks:"
	echo " Task 2 - Simple shell 0.1"
	echo " Task 3 - Simple shell 0.2"
	echo " Task 4 - Simple shell 0.3"
	echo " Task 5 - Simple shell 0.4"
	echo "---------------------------------------------"

	read N_VERSION
	if [[ ! ("$N_VERSION" -eq 2 || "$N_VERSION" -eq 3 || "$N_VERSION" -eq 4 || "$N_VERSION" -eq 5) ]]
	then
		echo -e "${RED}Option not recognized${NC}"
		echo "Press any key and try again"
		pause
		add_test_menu
	fi
	echo "---------------------------------------------"
	case $N_VERSION in
	2)
		echo -e "${YELLOW} Caution${NC}: the test case you enter must be"
		echo " tailored to the task requirements"
		echo " make sure you comply with them before"
		echo " writing the new case"
		;;
	3)
		echo -e "${YELLOW} Caution${NC}: the test case you enter must be"
		echo " tailored to the task requirements"
		echo " make sure you comply with them before"
		echo " writing the new case"
		;;
	4)
		echo -e "${YELLOW} Caution${NC}: the test case you enter must be"
		echo " tailored to the task requirements"
		echo " make sure you comply with them before"
		echo " writing the new case"
		;;
	5)
		echo -e "${YELLOW} Caution${NC}: the test case you enter must be"
		echo " tailored to the task requirements"
		echo " make sure you comply with them before"
		echo " writing the new case"
		;;
    	esac
}
function new_case()
{
	echo "---------------------------------------------"
	echo -e " Type input for ${BLUE}task $N_VERSION ${NC}new test case:"
	fullread NEW_TEST
	if [[ ! -d "simple_shell_task$N_VERSION" ]]
	then
		$(mkdir simple_shell_task$N_VERSION)
	fi
	echo "$NEW_TEST" >> simple_shell_task$N_VERSION/list_test
	echo -e "${GREEN}Test case added correctly${NC}"

	echo "---------------------------------------------"
	another_case
}
function another_case()
{
	echo -e "Add another case for ${BLUE}task $N_VERSION ${NC}? [y/n]"
	read ANOTHER
	case $ANOTHER in
	y)
		#run again
		new_case
		;;
	n)
		echo -e "${BLUE}Updating to github...${NC}"
		RAM=$(git add ./simple_shell_task$N_VERSION/list_test)
		RAM=$(git status)
		RAM=$(git commit -m "new cases from $ID_HOLBERTON (auto-push)")
		RAM=$(git push origin main)
		echo -e "${BLUE}To return to the menu press any key${NC}"
		pause
		menu
		;;
	*)
		echo -e "${RED}Option not recognized${NC}"
		echo "Press any key and try again"
		pause
		another_case
		;;
	esac
}

start